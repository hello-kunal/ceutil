# CMakeM1 checks ADDCV variable whether to include OpenCV 
# together with ceUtil, wxWidgets, and jsoncpp
# and return LIBS variable with the list of libraries to link 

message(STATUS "Project dir = ${PROJECT_SOURCE_DIR}")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
message(STATUS "Project version = ${CMAKE_PROJECT_VERSION}")

if(WIN32)
    # For windows -------------------------------------------------------
    # Set VCPKGDIR environmental variable for vcpkg root folder
    message(STATUS "vcpkg dir = $ENV{VCPKGDIR}")
    if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
        # if 32 bits
        include_directories($ENV{VCPKGDIR}/installed/x86-windows/include)
        link_directories($ENV{VCPKGDIR}/installed/x86-windows/lib)
    else()
        # if 64 bits
        include_directories($ENV{VCPKGDIR}/installed/x64-windows/include)
        link_directories($ENV{VCPKGDIR}/installed/x64-windows/lib)
    endif()
    find_package(jsoncpp REQUIRED)
    set(JSONCPP_LIBRARIES jsoncpp)
    find_package(wxWidgets COMPONENTS core net base REQUIRED)
    if(ADDCV)
        find_package(OpenCV REQUIRED)
    endif()
else()
    # For linux  -------------------------------------------------------
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(JSONCPP jsoncpp)
    link_libraries(${JSONCPP_LIBRARIES})
    include_directories(${JSONCPP_INCLUDE_DIRS})
    find_package(wxWidgets COMPONENTS core net base REQUIRED)
    include("${wxWidgets_USE_FILE}")
    if(ADDCV)
        find_package(OpenCV REQUIRED)
        include_directories(${OpenCV_INCLUDE_DIR})
    endif()
endif()
#  ------------------------------------------------------------------
if(ADDCV)
    set(LIBS ceUtil ${JSONCPP_LIBRARIES} ${wxWidgets_LIBRARIES} ${OpenCV_LIBS})
else()
    set(LIBS ceUtil ${JSONCPP_LIBRARIES} ${wxWidgets_LIBRARIES})
endif()
message(STATUS "List of libraries = ${LIBS}")